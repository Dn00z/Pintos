			+--------------------+
			|        CS 2042      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- PRELIMINARIES ----

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff. If you fail to do so while your
>> soltion contains such material you will be penalized.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- In thread.h --

    struct thread
    {
        int64_t tick_time;
    }

    --> added tick_time to contain sleep time of a thread

-- In timer.c --

    struct list sleep_thraeds_list;

    --> this global linked list keeps the thread_elem of each thread which are sleeping.

    struct list_elem *head;
    struct thread *h_thread;

    --> these two are used to store the first thread of the sleep_thraeds_list in timer_interrupt function.
       head is used to store elem of the thread and h_thread is used to store thread that mataches elem.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

    --> When the timer_sleep() called a thread is added to the list of sleeping threads in inccreasing order only if (thread's remaining sleep time > start tick time)
        while doing so, timer_interrupt() checks if there are threads which are (thread's remaining sleep time < start ticktime) and unblock them using
        thread_unblock() function.

        Following function is used to add a thread to the sleep_thraeds_list in order,

        void thread_sleep (int64_t ticks)
        {
            enum intr_level pre_level = intr_disable();
            struct thread *curr_thread = thread_current();
            curr_thread->tick_time = ticks;
            list_insert_ordered(&sleep_threads_list, &curr_thread->elem, compare_ticktime, NULL);
            thread_block();
            intr_set_level(pre_level);
        }

        compare_ticktime() call back function -->

        bool compare_ticktime(const struct list_elem *first, const struct list_elem *second, void *aux)
        {
            struct thread *first_thread = list_entry (first, struct thread, elem);
            struct thread *second_thread = list_entry (second, struct thread, elem);

            return first_thread->tick_time < second_thread->tick_time;
        }

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

    --> timer_interrupt() function updates and unblocks each thread, if the time has passed, the treads in the sleep_thraeds_list
        checking all the elements until sleep_thraeds_list get empty using while loop.

        static void timer_interrupt (struct intr_frame *args UNUSED)
        {
            struct list_elem *head;
            struct thread *h_thread;
            ticks++;
            thread_tick();
            while(!list_empty(&sleep_threads_list))
            {
                head = list_front(&sleep_threads_list);
                h_thread = list_entry (head, struct thread, elem);
                if(h_thread->tick_time > ticks ) break;
                list_remove (head);
                thread_unblock(h_thread);
            }
        }

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

    --> To avoid race condition, interrupts are disabled temporarily before adding new thread to the list of sleeping threads
        in thread_sleep() function

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

    --> Timer interrupts can never preempt timer_sleep () because it temporarily disables interrupts remporarily just before
        adding the thread to the list of sleeping threads.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    --> This design is simple to implement and less time consuming because in this design, the list of sleeping thread is maintained in increasing order,
        therefore it is easy to timer_interrupt() to find threads that are needed to wake up.

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

-- In thread.h --

    struct thread
    {
        struct list donors;
        struct list_elem donor_elem;
        int original_priority;

    }
    --> 'struct list donors' is used to keep the list of  priority donors for a thread.
    --> 'struct list_elem donor_elem' would allow a thread to add itself to the
         donors list of the thread it is donating priority.
    --> 'int original_priority' is used to keep track of priority of a thread when thread is initialized
         or when thread's priority is changed by the 'thread_set_priority' function.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

    --> Considering usage of struct list donors, when T1 thread comes to acquire a lock and if there is already a holder thread T2 (lock acquired by T2 thread)
        then T1 is added to the donor list of lock holder in decending order.
    --> If priority of the lock holder is less than newly added donor thread, then prioroty of the holder thread is set to priority of
        of newly added thread.

    --> when lock holer release the lock, the waiting threads on that lock are removed from the donors list of holder thread, then priority
        of the holder thread is set to original priority only if donors list is empty,  otherwise it is set to highest priority of the donors list.

    --nested donation--

    --> Suppose there are three threads A, B, C that are acquiring locks X, Y, Z resepectively as follows.

    --------------        ------------
    | thread-A   |        | lock-X   |
    | priority-10| <------| holder-A |
    --------------        ------------
                                ^
                                |
                        --------------        ------------
                        | thread-B   |        | lock-Y   |
                        | priority-9 | <------| holder-B |
                        --------------        ------------
                                                    ^
                                                    |
                                            --------------        ------------
                                            | thread-C   |        | lock-Z   |
                                            | priority-5 | <------| holder-C |
                                            --------------        ------------

    --> Then D thread that has priority of 14 comes and require the Z lock, then all the threads that are priority is less than 14
    has to change priority temporarily.

    --------------        ------------
    | thread-A   |        | lock-X   |
    | priority-14| <------| holder-A |
    --------------        ------------
                                ^
                                |
                        --------------        ------------
                        | thread-B   |        | lock-Y   |
                        | priority-14| <------| holder-B |
                        --------------        ------------
                                                    ^
                                                    |
                                            ---------------        ------------         --------------
                                            | thread-C    |        | lock-Z   |         |thread-D    |
                                            | priority-14 | <------| holder-C | <-------|priority-14 |
                                            ---------------        ------------         --------------


---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

    --> The list of threads waiting for a semaphore is sorted according to each thread's priority
        where threads are sorted in decending order to ensure the highest priority thread wakes up first
        by poping out first thread in waiting list.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

    --> First it checks if there a thread hold the lock
    --> If a thread holds the lock, then the thread that comes to acquire the lock is added to the donors list of the
        holder thread according to the priority decending order
    --> If the priority of the newly added donor thread is greater than the priority of the donor thread, then the priority
        of the donor thread is set to the priority of the donor thread temporarily
    --> Then ready_list sorted as priority was changed.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

    --> First remove the donor threads that are waiting on the lock that want to release, from the donors list of lock holder.
    --> Then check for the donors list, if the list is empty priority of the lock holder is set to original priority of that thread
        otherwise it is set to the highest priority of the donors list
    --> Finally call the sema_up() function for the lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

    --> In thread_set_priority () function, original priority of the thread is set to the given new priority.
    --> if the list od donors of the thread is empty, then the priority of the thread is set to given priority.
        otherwise it checks for the highest priority of the donors list and compare with new priority. if chanegd is possible
        then the priority chanegd to new priority.
    --> To tackle this situation, interrupts are being turned off.


---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

    --> I chose this design because it covers all the corner cases swiftly.
    --> It makes efficient use of linked list implementation already provided
        and does not allocate any heap memory.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts. You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?